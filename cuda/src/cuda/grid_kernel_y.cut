template<bool bool_extra=false>
__global__ void cuda_periodic_y_modulo ( cuda_Struct_Grid drvt_grid  , cuda_Struct_Grid soln_grid , 
                                         cuda_run_time_vector_shallow_copy <ns_type::cuda_precision> stencil_dt_dx , 
                                         cuda_run_time_vector_shallow_copy <int> stencil_shift , 
                                         ns_type::cuda_precision * S ,  // S is from pntr grid
                                         ns_type::cuda_precision * P ,
                                         ns_type::cuda_precision * P_extra ,
                                         ns_type::cuda_precision * R ,
                                         ns_type::cuda_precision * R_extra )
{
    // int N_block  =  gridDim.x;   // Not needed because we don't loop through the (simulation) gridLines (one threadblock each gridLine)
    int N_thread = blockDim.x;

    int ind_block  =  blockIdx.x;
    int ind_thread = threadIdx.x;

    // NOTE: One threadBlock is assigned to one gridLine; when calling this 
    //       kernel, the first argument in <<< >>> should be specified as 
    //       drvt_grid.interior_END_x - drvt_grid.interior_BGN_x, i.e., the
    //       total number of gridLines this kernel is responsible for.


    int N_modulo = 1<<2;    // see misc c_modulo_operator for rationale
    if ( soln_grid.G_type_y == 'M' ) { N_modulo = soln_grid.G_size_y    ; }
    if ( soln_grid.G_type_y == 'N' ) { N_modulo = soln_grid.G_size_y - 1; }

    int ix = ind_block;
    {
        for ( int iy = ind_thread; iy < drvt_grid.G_size_y; iy += N_thread )  // iy goes through the grid index on drvt grid
        {
            int i_d = ix * drvt_grid.Ly_pad + iy;
            int i_s = ix * soln_grid.Ly_pad;

            ns_type::cuda_precision v_d = 0.;

            for ( int ind_stencil=0; ind_stencil<stencil_dt_dx.length; ind_stencil++ )
                { v_d += S[ i_s + ( iy + stencil_shift( ind_stencil ) + N_modulo ) % N_modulo ] * stencil_dt_dx( ind_stencil ); }

            drvt_to_rths <bool_extra> ( v_d, i_d, P, P_extra, R, R_extra );
        }
    }
} // cuda_periodic_y_modulo ()


template<bool bool_extra>
void cuda_Class_Grid::kernel_launch_cuda_periodic_y_modulo ( int N_block , int N_thread )
{
    ns_type::cuda_precision * S = this->Map_pntr_soln.at('y')->ptr;

    ns_type::cuda_precision * R       = this->Vec_rths.at(0).ptr;
    ns_type::cuda_precision * P       = this->Vec_prmt.at(0).ptr;

    ns_type::cuda_precision * R_extra = nullptr;
    ns_type::cuda_precision * P_extra = nullptr;

    if ( bool_extra ) 
    {
        // [2023/07/17]
        // NOTE: It would be great if we could "static assert" here to check which grid is calling.
        //       Even better, if we have a member variable "bool_normal" of the grid class that is 
        //       available at compile time, we could use that variable for the "if test" instead. 
        //       Moreover, instead of having 'y' as part of the function name, maybe we can change
        //       it to a template parameter.

        R       = this->Vec_rths.at(0).ptr;  // 0 corresponds to 'x'
        R_extra = this->Vec_rths.at(1).ptr;  // 1 corresponds to 'y', which needs extra work

        P       = this->Vec_prmt.at(0).ptr;  // lambda
        P_extra = this->Vec_prmt.at(1).ptr;  // 2 * mu
    }


    cuda_Struct_Grid & drvt_grid =                  this->struct_grid;
    cuda_Struct_Grid & soln_grid = Map_pntr_grid.at('y')->struct_grid;

    auto stencil_dt_dx    = this->stencil_dt_dx_shallow_copy;
    auto stencil_shift = this->Map_stencil_shift_shallow_copy.at('y');

    if ( N_block  == -1 ) { N_block  = drvt_grid.G_size_x; }    // this should be x
    if ( N_thread == -1 ) { N_thread = 32;                 }
    
    cudaStream_t stream = bool_stream ? this->stream_dy : 0;

    cuda_periodic_y_modulo <bool_extra> <<< N_block , N_thread , 0 , stream >>> 
        ( drvt_grid , soln_grid , stencil_dt_dx , stencil_shift , S , P , P_extra , R , R_extra );
}